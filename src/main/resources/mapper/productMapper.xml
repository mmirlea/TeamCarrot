<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- mapper의 전체 경로 -->
<mapper namespace="com.carrot.board.dao.ProductMapper">
	
	<!-- join을 위한 resultmap -->
	<resultMap id="ProMemJoin" type="ProductDTO">
		<result property="p_menu" column="p_menu"/>
		<result property="p_num" column="p_num"/>
		<result property="p_cate" column="p_cate"/>
		<result property="p_email" column="p_email"/>
		<result property="p_title" column="p_title"/>
		<result property="p_content" column="p_content"/>
		<result property="p_price" column="p_price"/>
		<result property="p_likey" column="p_likey"/>
		<result property="p_likeYN" column="p_likeYN"/>
		<result property="p_comm" column="p_comm"/>
		<result property="p_viewcnt" column="p_viewcnt"/>
		<result property="p_tempsaveyn" column="p_tempsaveyn"/>
		<result property="p_negoyn" column="p_negoyn"/>
		<result property="p_img" column="p_img"/>
		<result property="p_update" column="p_update"/>
		<result property="p_crdate" column="p_crdate"/>
		<association property="userDTO" javaType="UserDTO">
			<id property="m_email" column="m_email"/>
			<result property="m_nicknm" column="m_nicknm"/>
			<result property="m_addr1" column="m_addr1"/>
			<result property="m_addr2" column="m_addr2"/>
			<result property="m_ondo" column="m_ondo"/>
		</association>
	</resultMap>
	
		
	<!-- 전체 게시물 개수 -->
	<select id="count" resultType="int">
		SELECT COUNT(*)
		FROM PRODUCT
	</select>
		
	<!-- 게시글 목록 조회 -->             
	<select id="selectAll" resultMap="ProMemJoin">
		SELECT P.P_MENU, P.P_NUM, P.P_CATE, M.M_NICKNM, M_ADDR1, M_ADDR2, 
			   P.P_TITLE, P.P_CONTENT, P.P_PRICE, P.P_LIKEY, P.P_COMM, P.P_IMG, P.P_UPDATE, P.P_CRDATE
		FROM PRODUCT P
		INNER JOIN MEMBER M
		ON P.P_EMAIL = M.M_EMAIL
		WHERE P.P_MENU = '1'
		ORDER BY P.P_CRDATE DESC, P.P_NUM DESC

	</select>
	
	<!-- 게시글 읽어오기 -->	
	<select id="select" parameterType="ProductDTO" resultMap="ProMemJoin">
		SELECT P.P_MENU, P.P_NUM, P.P_CATE, P.P_EMAIL, P.P_TITLE, P.P_CONTENT, P.P_IMG, 
			   P.P_CRDATE, P.P_UPDATE, P.P_TEMPSAVEYN, P.P_PRICE, P.P_NEGOYN, P.P_IMG,
			   P.P_COMM, P.P_VIEWCNT, M.M_NICKNM, M.M_ADDR1, M.M_ADDR2, M.M_ONDO, M.M_PROIMG,
  
			   (SELECT COUNT(*) CNT FROM LIKEY WHERE P_MENU = L_MENU AND P_NUM= L_PBNUM )AS P_LIKEY,
			   (SELECT DECODE(L_EMAIL, #{p_email}, 'Y', 'N') FROM LIKEY WHERE P_MENU = L_MENU AND P_NUM= L_PBNUM )AS P_LIKEYN
		FROM PRODUCT P
		INNER JOIN MEMBER M
		ON P.P_EMAIL = M.M_EMAIL
		WHERE P.P_MENU = '1' AND P.P_NUM = #{p_num}
	</select>

	<!-- 페이징 처리하기 -->
	<select id="selectPage" parameterType="SearchConditionP" resultMap="ProMemJoin">
		SELECT *
		FROM(SELECT ROWNUM rNum, A.*
			FROM (SELECT P.P_MENU, P.P_NUM, P.P_CATE, M.M_NICKNM, M_ADDR1, M_ADDR2, 
			  			 P.P_TITLE, P.P_CONTENT, P.P_PRICE, P.P_LIKEY, P.P_COMM, P.P_VIEWCNT, P.P_IMG, P.P_UPDATE, P.P_CRDATE
				  FROM product p
				  INNER JOIN MEMBER M
				  ON P.P_EMAIL = M.M_EMAIL
				  WHERE P.P_MENU = '1'
				  ORDER BY P.P_CREDATE DESC, P.P_NUM DESC) A)
		WHERE rNum BETWEEN ((NVL(#{page}, 0)-1) * #{pageSize} +1) AND (NVL(#{page}, 0) * #{pageSize})
	</select>
	
	<!-- addr1 검색 조건 -->
	<sql id="searchCondition">
		<choose>
			<when test='addr1=="opRegion"'>
				AND P.P_TITLE LIKE '%'||#{keyword}||'%'
			</when>
			<when test='addr1 == null and keyword == null'>
				AND 1=1
			</when>
			<otherwise>
				ANd P.P_TITLE LIKE '%'||#{keyword}||'%'
				AND M.M_ADDR1 LIKE '%'||#{addr1}||'%'
			</otherwise>
		</choose>
	</sql>
	
	<!-- cate 검색 조건 -->
	<sql id="searchCondition2">
		<choose>
			<when test='cate=="digital"'>
				AND P.P_CATE LIKE '%디지털기기%'		
			</when>
			<when test='cate=="furniture"'>
				AND P.P_CATE LIKE '%가구%'
			</when>
			<when test='cate=="kitchen"'>
				AND P.P_CATE LIKE '%생활%'
			</when>
			<when test='cate=="baby"'>
				AND P.P_CATE LIKE '%유아용품%'
			</when>
			<when test='cate=="clothes"'>
				AND P.P_CATE LIKE '%의류%'
			</when>
			<when test='cate=="book"'>
				AND P.P_CATE LIKE '%도서%'
			</when>
			<when test='cate=="ticket"'>
				AND P.P_CATE LIKE '%티켓%'
			</when>
			<when test='cate=="etc"'>
				AND p.p_cate Like '%기타%'
			</when>
			<otherwise>
				AND 1=1
			</otherwise>
		</choose>
	</sql>
	
	<!-- 게시글 검색하기 -->
	<select id="searchSelectPage" parameterType="SearchConditionP" resultMap="ProMemJoin">
		SELECT * 
		FROM(SELECT ROWNUM rNum, A.* 
			FROM(SELECT P.P_MENU, P.P_NUM, P.P_CATE, M.M_NICKNM, M.M_ADDR1, M.M_ADDR2, 
			  			 P.P_TITLE, P.P_CONTENT, P.P_PRICE, P.P_COMM, P.P_VIEWCNT, P.P_IMG, P.P_UPDATE, P.P_CRDATE,
			  			 (SELECT COUNT(*) CNT FROM LIKEY WHERE P_MENU = L_MENU AND P_NUM= L_PBNUM )AS P_LIKEY
				  FROM PRODUCT P
				  INNER JOIN MEMBER M
				  ON P.P_EMAIL = M.M_EMAIL
				  WHERE P.P_MENU = '1'
				  <include refid="searchCondition"></include>
				  <include refid="searchCondition2"></include>
				  ORDER BY P.P_CRDATE DESC, P.P_NUM DESC) A)
		WHERE rNum BETWEEN ((NVL(#{page}, 0)-1) * #{pageSize} +1) AND (NVL(#{page}, 0) * #{pageSize})
	</select>
	
	<!-- 검색했을 때의 게시글 개수 -->
	<select id="searchResultCnt" parameterType="SearchConditionP" resultType="int">
		SELECT count(*)
		FROM (SELECT P.P_MENU, P.P_NUM, P.P_CATE, M.M_NICKNM, M_ADDR1, M_ADDR2, 
			  			 P.P_TITLE, P.P_CONTENT, P.P_PRICE, P.P_LIKEY, P.P_COMM, P.P_IMG, P.P_UPDATE, P.P_CRDATE
				  FROM PRODUCT P
				  INNER JOIN MEMBER M
				  ON P.P_EMAIL = M.M_EMAIL
				  WHERE P.P_MENU = '1'
		WHERE 1=1
		<include refid="searchCondition"></include>
		<include refid="searchCondition2"></include>
	</select>
	
	<!-- 글 추가하기 -->
	<insert id="insert" parameterType="ProductDTO">
		INSERT INTO PRODUCT(P_MENU, P_NUM, P_CATE, P_EMAIL, P_TITLE, P_CONTENT, P_CRDATE, P_TEMPSAVEYN, P_PRICE, P_NEGOYN, P_IMG)
		VALUES('1', seq_product_num.nextval, #{p_cate}, #{p_email}, #{p_title}, #{p_content}, SYSDATE, #{p_tempsaveyn}, #{p_price}, #{p_negoyn}, #{p_img})
	</insert>
	
	<!-- 임시저장 추가하기 -->
	<insert id="save" parameterType="ProductDTO">
		INSERT INTO PRODUCT (P_NUM, P_CATE, P_EMAIL, P_TITLE, P_CONTENT, P_TEMPSAVEYN, P_PRICE, P_NEGOYN, P_IMG)
		VALUES (SEQ_PRODUCT_NUM.NEXTVAL, #{p_cate}, #{p_email}, #{p_title}, #{p_content}, 'Y', #{p_price}, #{p_negoyn}, #{p_img})
	</insert>
	
	<!-- 글 수정하기 -->
	<update id="update" parameterType="ProductDTO">
		UPDATE PRODUCT
		SET P_TITLE = #{p_title}, P_CONTENT = #{p_content}, P_UPDATE = SYSDATE, 
			P_PRICE = #{p_price}, P_NEGOYN = #{p_negoyn}, P_IMG = #{p_img} 
		WHERE P_MENU = '1' AND P_NUM = #{p_num} AND P_EMAIL = #{p_email} 
	</update>
	
	<!-- 임시저장 작성하기 -->
	<update id="tempUpdate" parameterType="ProductDTO">
		UPDATE PRODUCT
		   SET P_TITLE = #{p_title},
		       P_CONTNET = #{p_content},
		       P_PRICE = #{p_price},
		       P_NEGOYN = #{p_negoyn},
		       P_IMG = #{p_img}
		       AND P_TEMPSAVEYN = 'N'
		       P_UPDATE = SYSDATE
		 WHERE P_MENU = '1'
		   AND P_NUM = #{p_num}
		   AND P_EMAIL = #{p_email}
		   AND P_TEMPSAVEYN = 'Y'
	</update>
	
	<!-- 조회수 증가 -->
	<update id="increaseViewCnt" parameterType="int">
		UPDATE PRODUCT
		SET P_VIEWCNT = P_VIEWCNT + 1
		WHERE P_MENU = '1'
		AND P_NUM = #{p_num}
	</update>
	
	<!-- 상품 댓글 -->
	<update id="updateCommentspCnt" parameterType="map">
		UPDATE PRODUCT
		SET P_COMM = P_COMM + #{cnt}
		WHERE P_NUM = #{p_num}
	</update>
	
	<!-- 글 삭제하기 -->
	<delete id="delete" parameterType="map">
		DELETE FROM PRODUCT
		WHERE P_MENU = '1' AND P_NUM = #{p_num} AND P_EMAIL = #{p_email} 
	</delete>
	
	<!-- 게시글 전체 삭제 -->
	<delete id="deleteAll">
		DELETE FROM PRODUCT
	</delete>

</mapper>